{"version":3,"sources":["D2App/actions/Actions.module.css","D2App/clearForm/FormSection.module.css","D2App/clearForm/ClearForm.module.css","D2App/views/Home.module.css","D2App/locales/index.js","D2App/actions/Actions.js","D2App/clearForm/FormSection.js","D2App/clearForm/ClearForm.js","D2App/storage/clearStoragesByKey.js","D2App/storage/reservedStorageKeys.js","D2App/storage/useClearableStorageKeys.js","D2App/storage/getClearableKeys.js","D2App/indexedDb/dbExists.js","D2App/indexedDb/deleteDb.js","D2App/indexedDb/dhis2DatabaseNames.js","D2App/indexedDb/getCaptureAppUserDatabases.js","D2App/indexedDb/openDb.js","D2App/indexedDb/getKeyFromObjectStore.js","D2App/indexedDb/useClearableDatabaseKeys.js","D2App/indexedDb/getClearableDatabases.js","D2App/views/Home/deleteValues.js","D2App/indexedDb/clearDatabasesByKey.js","D2App/views/Home.js","D2App/views/Home/formatDeleteValues.js","D2App/App.js"],"names":["module","exports","i18n","addResources","arTranslations","ckbTranslations","csTranslations","daTranslations","enTranslations","esTranslations","frTranslations","idTranslations","kmTranslations","loTranslations","myTranslations","nbTranslations","prsTranslations","psTranslations","ptTranslations","pt_BRTranslations","ruTranslations","svTranslations","tetTranslations","tgTranslations","ukTranslations","urTranslations","uzTranslations","uz_LatnTranslations","viTranslations","zhTranslations","zh_CNTranslations","Actions","children","className","styles","actions","formatKeyToOption","key","label","value","FormSection","deselectButtonLabel","emptyMessage","form","headline","selectButtonLabel","storageKeys","storageName","storageDataTestName","toLowerCase","container","data-test","groupHeadline","length","onClick","change","dataTest","name","options","map","component","CheckboxGroup","validate","values","errors","localStorageKeys","sessionStorageKeys","indexedDatabaseKeys","FORM_ERROR","t","ClearForm","onSubmit","initialValues","handleSubmit","submitFailed","batch","selectAll","deselectAll","disabled","destructive","type","formErrors","error","defaultProps","clearStoragesByKey","storage","keys","forEach","removeItem","reduce","success","getItem","reservedStorageKeys","Object","Storage","prototype","useClearableStorageKeys","existingKeys","setExistingKeys","useState","onStorageChange","useCallback","existing","filter","includes","getClearableKeys","useEffect","refetch","dbExists","Promise","resolve","reject","alreadyExists","request","window","indexedDB","open","onsuccess","result","close","deleteDb","then","onerror","onupgradeneeded","succeedWhenNonExistant","exists","deleteDatabase","dhis2DatabaseNames","getCaptureAppUserDatabases","async","db","dbNames","captureDbExists","data","storeName","transaction","objectStore","get","event","target","e","getKeyFromObjectStore","useClearableDatabaseKeys","refetchCounter","setRefetchCounter","loading","setLoading","setData","staticDatabases","userDatabases","all","catch","operation","deleteValues","localStorage","sessionStorage","clearSessionStorageByKeys","allDeleteProcesses","clearDatabasesByKey","Home","refetchLocalStorageKeys","refetchSessionStorageKeys","refetchIndexedDatabaseKeys","showContent","message","formattedValues","shouldDeleteUserDatabases","formatDeleteValues","App","colors","spacers"],"mappings":"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","file":"static/js/app.6064088d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"actions\":\"Actions_actions__1BcAq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FormSection_container__20Fh9\",\"groupHeadline\":\"FormSection_groupHeadline__3kOHC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"actions\":\"ClearForm_actions__2P0VA\",\"action\":\"ClearForm_action__243lJ\",\"groupHeadline\":\"ClearForm_groupHeadline__2C-rb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__2aYrM\",\"headline\":\"Home_headline__2WsGZ\"};","//------------------------------------------------------------------------------\n// <auto-generated>\n// This code was generated by d2-i18n-generate.\n//\n// Changes to this file may cause incorrect behavior and will be lost if\n// the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nimport i18n from '@dhis2/d2-i18n';\nimport arTranslations from './ar/translations.json';\nimport ckbTranslations from './ckb/translations.json';\nimport csTranslations from './cs/translations.json';\nimport daTranslations from './da/translations.json';\nimport enTranslations from './en/translations.json';\nimport esTranslations from './es/translations.json';\nimport frTranslations from './fr/translations.json';\nimport idTranslations from './id/translations.json';\nimport kmTranslations from './km/translations.json';\nimport loTranslations from './lo/translations.json';\nimport myTranslations from './my/translations.json';\nimport nbTranslations from './nb/translations.json';\nimport prsTranslations from './prs/translations.json';\nimport psTranslations from './ps/translations.json';\nimport ptTranslations from './pt/translations.json';\nimport pt_BRTranslations from './pt_BR/translations.json';\nimport ruTranslations from './ru/translations.json';\nimport svTranslations from './sv/translations.json';\nimport tetTranslations from './tet/translations.json';\nimport tgTranslations from './tg/translations.json';\nimport ukTranslations from './uk/translations.json';\nimport urTranslations from './ur/translations.json';\nimport uzTranslations from './uz/translations.json';\nimport uz_LatnTranslations from './uz_Latn/translations.json';\nimport viTranslations from './vi/translations.json';\nimport zhTranslations from './zh/translations.json';\nimport zh_CNTranslations from './zh_CN/translations.json';\nconst namespace = 'default';\ni18n.addResources('ar', namespace, arTranslations);\ni18n.addResources('ckb', namespace, ckbTranslations);\ni18n.addResources('cs', namespace, csTranslations);\ni18n.addResources('da', namespace, daTranslations);\ni18n.addResources('en', namespace, enTranslations);\ni18n.addResources('es', namespace, esTranslations);\ni18n.addResources('fr', namespace, frTranslations);\ni18n.addResources('id', namespace, idTranslations);\ni18n.addResources('km', namespace, kmTranslations);\ni18n.addResources('lo', namespace, loTranslations);\ni18n.addResources('my', namespace, myTranslations);\ni18n.addResources('nb', namespace, nbTranslations);\ni18n.addResources('prs', namespace, prsTranslations);\ni18n.addResources('ps', namespace, psTranslations);\ni18n.addResources('pt', namespace, ptTranslations);\ni18n.addResources('pt_BR', namespace, pt_BRTranslations);\ni18n.addResources('ru', namespace, ruTranslations);\ni18n.addResources('sv', namespace, svTranslations);\ni18n.addResources('tet', namespace, tetTranslations);\ni18n.addResources('tg', namespace, tgTranslations);\ni18n.addResources('uk', namespace, ukTranslations);\ni18n.addResources('ur', namespace, urTranslations);\ni18n.addResources('uz', namespace, uzTranslations);\ni18n.addResources('uz_Latn', namespace, uz_LatnTranslations);\ni18n.addResources('vi', namespace, viTranslations);\ni18n.addResources('zh', namespace, zhTranslations);\ni18n.addResources('zh_CN', namespace, zh_CNTranslations);\nexport default i18n;","import { ButtonStrip } from '@dhis2/ui-core';\nimport React from 'react';\nimport propTypes from '@dhis2/prop-types';\nimport styles from './Actions.module.css';\nexport const Actions = ({\n  children\n}) => <div className={styles.actions}>\n        <ButtonStrip>{children}</ButtonStrip>\n    </div>;\nActions.propTypes = {\n  children: propTypes.node\n};","import { Button } from '@dhis2/ui-core';\nimport { Field, CheckboxGroup } from '@dhis2/ui-forms';\nimport React from 'react';\nimport propTypes from '@dhis2/prop-types';\nimport { Actions } from '../actions/Actions';\nimport styles from './FormSection.module.css';\n\nconst formatKeyToOption = key => ({\n  label: key,\n  value: key\n});\n\nexport const FormSection = ({\n  deselectButtonLabel,\n  emptyMessage,\n  form,\n  headline,\n  selectButtonLabel,\n  storageKeys,\n  storageName\n}) => {\n  const storageDataTestName = storageName.toLowerCase();\n  return <div className={styles.container} data-test={`dhis2-cachecleaner-${storageDataTestName}`}>\n            <h2 className={styles.groupHeadline}>{headline}</h2>\n\n            {!storageKeys.length && <p data-test=\"dhis2-cachecleaner-emptystoragemessage\">\n                    {emptyMessage}\n                </p>}\n\n            {!!storageKeys.length && <Actions>\n                    <Button onClick={() => form.change(storageName, storageKeys)} dataTest={`dhis2-cachecleaner-formsection-selectall`}>\n                        {selectButtonLabel}\n                    </Button>\n\n                    <Button onClick={() => form.change(storageName, [])} dataTest={`dhis2-cachecleaner-formsection-deselectall`}>\n                        {deselectButtonLabel}\n                    </Button>\n                </Actions>}\n\n            <Field name={storageName} options={storageKeys.map(formatKeyToOption)} component={CheckboxGroup} />\n        </div>;\n};\nFormSection.propTypes = {\n  deselectButtonLabel: propTypes.string.isRequired,\n  emptyMessage: propTypes.string.isRequired,\n  form: propTypes.shape({\n    change: propTypes.func.isRequired\n  }).isRequired,\n  headline: propTypes.string.isRequired,\n  selectButtonLabel: propTypes.string.isRequired,\n  storageKeys: propTypes.arrayOf(propTypes.string).isRequired,\n  storageName: propTypes.string.isRequired\n};","import { Button, Help } from '@dhis2/ui-core';\nimport { FORM_ERROR } from 'final-form';\nimport i18n from '@dhis2/d2-i18n';\nimport propTypes from '@dhis2/prop-types';\nimport { Form } from '@dhis2/ui-forms';\nimport React from 'react';\nimport { Actions } from '../actions/Actions';\nimport { FormSection } from './FormSection';\nimport styles from './ClearForm.module.css';\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.localStorageKeys.length && !values.sessionStorageKeys.length && !values.indexedDatabaseKeys.length) {\n    errors[FORM_ERROR] = i18n.t('No data selected');\n  }\n\n  return errors;\n};\n\nexport const ClearForm = ({\n  onSubmit,\n  initialValues,\n  localStorageKeys,\n  sessionStorageKeys,\n  indexedDatabaseKeys\n}) => {\n  const selectAll = form => {\n    form.batch(() => {\n      form.change('localStorageKeys', localStorageKeys);\n      form.change('sessionStorageKeys', sessionStorageKeys);\n      form.change('indexedDatabaseKeys', indexedDatabaseKeys);\n    });\n  };\n\n  const deselectAll = form => {\n    form.batch(() => {\n      form.change('localStorageKeys', []);\n      form.change('sessionStorageKeys', []);\n      form.change('indexedDatabaseKeys', []);\n    });\n  };\n\n  const onFormSubmit = values => {\n    onSubmit(values);\n  };\n\n  return <Form onSubmit={onFormSubmit} initialValues={initialValues} validate={validate}>\n            {({\n      handleSubmit,\n      errors,\n      submitFailed,\n      form\n    }) => <form onSubmit={handleSubmit}>\n                    <Actions>\n                        <Button onClick={() => selectAll(form)} dataTest=\"dhis2-cachecleaner-selectall\">\n                            {i18n.t('Select all')}\n                        </Button>\n\n                        <Button onClick={() => deselectAll(form)} dataTest=\"dhis2-cachecleaner-deselectall\">\n                            {i18n.t('Deselect all')}\n                        </Button>\n\n                        <Button disabled={!!errors[FORM_ERROR]} destructive type=\"submit\" dataTest=\"dhis2-cachecleaner-clear-top\">\n                            {i18n.t('Clear all selected items')}\n                        </Button>\n                    </Actions>\n\n                    <FormSection form={form} emptyMessage={i18n.t('Local storage empty')} selectButtonLabel={i18n.t('Select all local storage items')} deselectButtonLabel={i18n.t('Deselect all local storage items')} headline={i18n.t('Local storage')} storageKeys={localStorageKeys} storageName=\"localStorageKeys\" />\n\n                    <FormSection form={form} emptyMessage={i18n.t('Session storage empty')} selectButtonLabel={i18n.t('Select all session storage items')} deselectButtonLabel={i18n.t('Deselect all session storage items')} headline={i18n.t('Session storage')} storageKeys={sessionStorageKeys} storageName=\"sessionStorageKeys\" />\n\n                    <FormSection form={form} emptyMessage={i18n.t('No indexed databases')} selectButtonLabel={i18n.t('Select all databases')} deselectButtonLabel={i18n.t('Deselect all databases')} headline={i18n.t('Indexed database')} storageKeys={indexedDatabaseKeys} storageName=\"indexedDatabaseKeys\" />\n\n                    <div className={styles.formErrors}>\n                        {errors[FORM_ERROR] && submitFailed && <Help error>{errors[FORM_ERROR]}</Help>}\n                    </div>\n\n                    <Actions>\n                        <Button disabled={!!errors[FORM_ERROR]} destructive type=\"submit\" dataTest=\"dhis2-cachecleaner-clear-bottom\">\n                            {i18n.t('Clear all selected items')}\n                        </Button>\n                    </Actions>\n                </form>}\n        </Form>;\n};\nClearForm.defaultProps = {\n  initialValues: {\n    localStorageKeys: [],\n    sessionStorageKeys: [],\n    indexedDatabaseKeys: []\n  }\n};\nClearForm.propTypes = {\n  indexedDatabaseKeys: propTypes.arrayOf(propTypes.string).isRequired,\n  localStorageKeys: propTypes.arrayOf(propTypes.string).isRequired,\n  sessionStorageKeys: propTypes.arrayOf(propTypes.string).isRequired,\n  onSubmit: propTypes.func.isRequired,\n  initialValues: propTypes.shape({\n    indexedDatabaseKeys: propTypes.arrayOf(propTypes.string),\n    localStorageKeys: propTypes.arrayOf(propTypes.string),\n    sessionStorageKeys: propTypes.arrayOf(propTypes.string)\n  })\n};","export const clearStoragesByKey = (storage, keys) => {\n  // remove keys\n  keys.forEach(key => storage.removeItem(key)); // return removal check\n\n  return keys.reduce((success, key) => {\n    // fail if already failed\n    if (!success) return false;\n    return storage.getItem(key) === null;\n  }, true);\n};","export const reservedStorageKeys = [// exclude methods and props of Storage instances\n...Object.keys(Storage.prototype), // custom dhis2 keys that should not be cleared\n'dhis2.menu.ui.headerBar.title', 'dhis2.menu.ui.headerBar.link', 'dhis2.menu.ui.headerBar.userStyle', 'DHIS2_BASE_URL'];","import { useCallback, useEffect, useState } from 'react';\nimport { getClearableKeys } from './getClearableKeys';\nexport const useClearableStorageKeys = storage => {\n  const [existingKeys, setExistingKeys] = useState([]);\n  const onStorageChange = useCallback(() => {\n    const existing = getClearableKeys(storage);\n    setExistingKeys(existing);\n  }, [storage]);\n  useEffect(() => {\n    onStorageChange();\n  }, [onStorageChange]);\n  return {\n    keys: existingKeys,\n    refetch: onStorageChange\n  };\n};","import { reservedStorageKeys } from './reservedStorageKeys';\n/**\n * @param {Storage} strage\n * @returns {String[]}\n */\n\nexport const getClearableKeys = storage => Object.keys(storage).filter(key => !reservedStorageKeys.includes(key));","import { deleteDb } from './deleteDb';\n/**\n * @param {string} name\n * @returns {Promise.<bool>}\n */\n\nexport const dbExists = name => new Promise((resolve, reject) => {\n  let alreadyExists = true;\n  const request = window.indexedDB.open(name);\n\n  request.onsuccess = () => {\n    request.result.close();\n\n    if (!alreadyExists) {\n      deleteDb(name).then(() => resolve(false));\n    } else {\n      resolve(true);\n    }\n  };\n\n  request.onerror = error => reject(error);\n\n  request.onupgradeneeded = () => alreadyExists = false;\n});","import { dbExists } from './dbExists';\nexport const deleteDb = (name, succeedWhenNonExistant = false) => dbExists(name).then(exists => {\n  if (exists) {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.deleteDatabase(name);\n      request.onsuccess = resolve;\n      request.onerror = reject;\n    });\n  }\n\n  return succeedWhenNonExistant ? Promise.resolve() : Promise.reject();\n});","export const dhis2DatabaseNames = ['dhis2ou', 'dhis2', 'dhis2tc', 'dhis2ec', 'dhis2de', 'dhis2er', 'dhis2ca'];","import { dbExists } from './dbExists';\nimport { getKeyFromObjectStore } from './getKeyFromObjectStore';\nimport { openDb } from './openDb';\nconst userCachesStoreName = 'userCaches';\nexport const getCaptureAppUserDatabases = () => dbExists('dhis2ca').then(async captureDbExists => {\n  let db;\n  let dbNames = [];\n\n  if (captureDbExists) {\n    try {\n      db = await openDb('dhis2ca');\n      const data = await getKeyFromObjectStore(db, userCachesStoreName, 'accessHistory');\n\n      if (data && data.values) {\n        dbNames = data.values;\n      }\n    } catch (e) {\n      dbNames = [];\n    } finally {\n      db && db.close();\n    }\n  }\n\n  return dbNames;\n});","/**\n * @param {string} name\n * @returns {Promise.<IDBDatabase>}\n */\nexport const openDb = name => new Promise((resolve, reject) => {\n  const request = window.indexedDB.open(name);\n\n  request.onsuccess = () => resolve(request.result);\n\n  request.onerror = reject;\n});","export const getKeyFromObjectStore = (db, storeName, key) => new Promise((resolve, reject) => {\n  try {\n    const request = db.transaction(storeName).objectStore(storeName).get(key);\n\n    request.onsuccess = event => resolve(event.target.result);\n\n    request.onerror = reject;\n  } catch (e) {\n    reject(e);\n  }\n});","import { useEffect, useState } from 'react';\nimport { getClearableDatabases } from './getClearableDatabases';\nimport { getCaptureAppUserDatabases } from './getCaptureAppUserDatabases';\nexport const useClearableDatabaseKeys = () => {\n  const [refetchCounter, setRefetchCounter] = useState(0);\n\n  const refetch = () => setRefetchCounter(refetchCounter + 1);\n\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState({\n    // Contains all databases that are listed in the\n    // \"dhis2DatabaseNames\" file that acutally exist\n    staticDatabases: [],\n    // these won't be listed, but should be deleted\n    // if the static database \"dhis2ca\" is deleted by the user\n    userDatabases: []\n  });\n  useEffect(() => {\n    const operation = async () => {\n      setLoading(true);\n      const staticDatabases = await getClearableDatabases().catch(() => []);\n      const userDatabases = await getCaptureAppUserDatabases().catch(() => []);\n      const allDatabases = {\n        staticDatabases,\n        userDatabases\n      };\n      setData(allDatabases);\n      setLoading(false);\n    };\n\n    operation();\n  }, [refetchCounter]);\n  return {\n    loading,\n    data,\n    refetch\n  };\n};","import { dbExists } from './dbExists';\nimport { dhis2DatabaseNames } from './dhis2DatabaseNames';\n/**\n * @returns {Promise.<String[]>}\n */\n\nexport const getClearableDatabases = () => Promise.all(dhis2DatabaseNames.map(name => dbExists(name).then(exists => exists ? name : null))).then(keys => {\n  const filtered = keys.filter(key => key);\n  return filtered;\n});","import { clearStoragesByKey } from '../../storage';\nimport { clearDatabasesByKey } from '../../indexedDb';\n\nconst clearLocalStorageByKeys = keys => clearStoragesByKey(window.localStorage, keys);\n\nconst clearSessionStorageByKeys = keys => clearStoragesByKey(window.sessionStorage, keys);\n\nexport const deleteValues = async values => {\n  if (values.localStorageKeys) {\n    clearLocalStorageByKeys(values.localStorageKeys);\n  }\n\n  if (values.sessionStorageKeys) {\n    clearSessionStorageByKeys(values.sessionStorageKeys);\n  }\n\n  if (values.indexedDB?.length) {\n    await clearDatabasesByKey(values.indexedDB);\n  }\n};","import { deleteDb } from './deleteDb';\nexport const clearDatabasesByKey = keys => {\n  const allDeleteProcesses = keys.map(key => deleteDb(key, true));\n  return Promise.all(allDeleteProcesses);\n};","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { ClearForm } from '../clearForm';\nimport { deleteValues } from './Home/deleteValues';\nimport { formatDeleteValues } from './Home/formatDeleteValues';\nimport { useClearableDatabaseKeys } from '../indexedDb';\nimport { useClearableStorageKeys } from '../storage';\nimport styles from './Home.module.css';\nexport const Home = () => {\n  const {\n    keys: localStorageKeys,\n    refetch: refetchLocalStorageKeys\n  } = useClearableStorageKeys(window.localStorage);\n  const {\n    keys: sessionStorageKeys,\n    refetch: refetchSessionStorageKeys\n  } = useClearableStorageKeys(window.sessionStorage);\n  const {\n    loading,\n    error,\n    data: indexedDatabaseKeys,\n    refetch: refetchIndexedDatabaseKeys\n  } = useClearableDatabaseKeys();\n  const {\n    staticDatabases,\n    userDatabases\n  } = indexedDatabaseKeys;\n\n  const refetch = async () => {\n    refetchLocalStorageKeys();\n    refetchSessionStorageKeys();\n    await refetchIndexedDatabaseKeys();\n  };\n\n  const onSubmit = async values => {\n    const formattedValues = formatDeleteValues(values, userDatabases);\n    await deleteValues(formattedValues);\n    await refetch();\n  };\n\n  const showContent = !loading && !error;\n  return <div className={styles.container}>\n            {loading && <p data-test=\"dhis2-cachecleaner-loading\">\n                    {i18n.t('Loading clearable data...')}\n                </p>}\n            {error && i18n.t(`Something went wrong: ${error.message}`)}\n            {showContent && <>\n                    <h1 className={styles.headline} data-test=\"dhis2-cachecleaner-homeheadline\">\n                        {i18n.t('DHIS 2 browser cache cleaner')}\n                    </h1>\n\n                    <ClearForm // keep these so the previously selected values\n      // are kept for rejection in the confirmation step\n      localStorageKeys={localStorageKeys} sessionStorageKeys={sessionStorageKeys} indexedDatabaseKeys={staticDatabases} onSubmit={onSubmit} />\n                </>}\n        </div>;\n};","export const formatDeleteValues = (values, userDatabases) => {\n  const {\n    indexedDatabaseKeys,\n    localStorageKeys,\n    sessionStorageKeys\n  } = values; // user databases should only be cleared when the \"dhis2ca\" db is cleared\n\n  const shouldDeleteUserDatabases = indexedDatabaseKeys?.includes('dhis2ca') && userDatabases?.length;\n  return {\n    localStorageKeys: localStorageKeys || [],\n    sessionStorageKeys: sessionStorageKeys || [],\n    indexedDB: [...(indexedDatabaseKeys || []), ...(shouldDeleteUserDatabases ? userDatabases : [])]\n  };\n};","import { CssVariables } from '@dhis2/ui-core';\nimport React from 'react';\nimport './locales/index.js';\nimport { Home } from './views';\nexport default function App() {\n  return <div className=\"container\">\n            <CssVariables colors spacers />\n            <Home />\n        </div>;\n}"],"sourceRoot":""}